{"Name":"Google Cloud Storage","Id":1946,"Alias":"DataNuage.Google.CloudStorage","Description":"DataNuage.Google.CloudStorage is a client library that uses Google Cloud Storage to store and retrieve any amount of data at any time, from anywhere.\r\n\r\nsupport@datanuage.com\r\n\r\nYour client_id, client-secret, refreshToken and projectId need to be passed as parameters of the constructor of the CloudStorage class.\r\nOnce you have an instance of CloudStorage, your can create buckets (similar to folders) and objects as in the example below.\r\n\r\nYOU SHOULD ONLY UPLOAD DUMMY DATA WHILE USING THE TRIAL VERSION OF THE SOFTWARE AS EVERY TRIAL USER SHARES THE SAME GOOGLE CLOUD STORAGE ACCOUNT.\r\nAny user of the trial version of the SOFTWARE will be able to view, copy, delete any data you might upload during the trial.\r\n\r\n```csharp\r\n   using DataNuage.Google.CloudStorage;\r\n...\r\n\r\n public override void ViewDidLoad()\r\n        {\r\n            base.ViewDidLoad();\r\n\r\n            View.Frame = UIScreen.MainScreen.Bounds;\r\n            View.BackgroundColor = UIColor.White;\r\n            View.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleHeight;\r\n\r\n            var button = UIButton.FromType(UIButtonType.RoundedRect);\r\n\r\n            button.Frame = new CGRect(\r\n                View.Frame.Width / 2 - buttonWidth / 2,\r\n                View.Frame.Height / 2 - buttonHeight / 2,\r\n                buttonWidth,\r\n                buttonHeight);\r\n\r\n            button.SetTitle(\"Click me\", UIControlState.Normal);\r\n\r\n            CancellationTokenSource cts = null;\r\n\r\n            button.TouchUpInside += async (sender, e) =\u003e\r\n            {\r\n                if (cts != null)\r\n                {\r\n                    cts.Cancel();\r\n                    return;\r\n                }\r\n\r\n                button.SetTitle(\"In progress\", UIControlState.Normal);\r\n\r\n                var random = new Random();\r\n\r\n                var bucket = \"my-unique-bucket-name\" + random.Next();\r\n\r\n                try\r\n                {\r\n                    var cloudStorage = new CloudStorage(CLIENT_ID, CLIENT_SECRET, refreshToken, PROJECT_ID);\r\n\r\n                    await cloudStorage.CreateBucketAsync(bucket);\r\n                    button.SetTitle(String.Format(\"Bucket {0} created\", bucket), UIControlState.Normal);\r\n\r\n                    await cloudStorage.PutObjectAsync(bucket, \"myobject\", \"Hello World\");\r\n                    button.SetTitle(String.Format(\"Object myobject created\"), UIControlState.Normal);\r\n\r\n                    var s = await cloudStorage.GetObjectAsStringAsync(bucket, \"myobject\");\r\n                    button.SetTitle(String.Format(\"{0} read\", s), UIControlState.Normal);\r\n\r\n                    await cloudStorage.DeleteObjectAsync(bucket, \"myobject\");\r\n                    button.SetTitle(String.Format(\"Object myobject deleted\"), UIControlState.Normal);\r\n\r\n                    var dummyData = new byte[1000000];\r\n                    cts = new CancellationTokenSource();\r\n\r\n                    try\r\n                    {\r\n                        await cloudStorage.PutObjectAsync(\r\n                            bucket,\r\n                            \"big\",\r\n                            dummyData,\r\n                            cancellationToken: cts.Token,\r\n                                progress: l =\u003e button.SetTitle(\r\n                                        string.Format(\"Upload {0}% - Click to cancel\", (100 * l) / dummyData.Length),\r\n                                        UIControlState.Normal));\r\n                    }\r\n                    catch (OperationCanceledException)\r\n                    {\r\n                        button.SetTitle(\"Canceled\", UIControlState.Normal);\r\n                    }\r\n\r\n                    cts = null;\r\n\r\n                    foreach (var objectName in await cloudStorage.ListObjectsAsync(bucket))\r\n                    {\r\n                        await cloudStorage.DeleteObjectAsync(bucket, objectName);\r\n                    }\r\n\r\n                    await cloudStorage.DeleteBucketAsync(bucket);\r\n                    button.SetTitle(String.Format(\"Empty bucket {0} deleted\", bucket), UIControlState.Normal);\r\n\r\n                    button.SetTitle(\"Success\", UIControlState.Normal);\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    new UIAlertView(\"Error\", ex.Message, null, \"ok\", null).Show();\r\n                    button.SetTitle(\"Click me\", UIControlState.Normal);\r\n                }\r\n            };\r\n\r\n#if TRIAL\r\n             View.AddSubview(button);\r\n#else\r\n            var webView = new UIWebView(View.Bounds);\r\n            View.AddSubview(webView);\r\n\r\n            var url = string.Format(\"https://accounts.google.com/o/oauth2/auth?response_type=code\u0026client_id={0}\u0026redirect_uri={1}\u0026scope=https://www.googleapis.com/auth/drive\",\r\n                    CLIENT_ID,\r\n                    REDIRECT_URI);\r\n            webView.LoadRequest(new NSUrlRequest(new NSUrl(url)));\r\n            webView.LoadFinished += async (_, __) =\u003e\r\n            {\r\n                var t = webView.EvaluateJavascript(\"document.title\");\r\n\r\n                var left = \"Success code=\";\r\n                if (t.StartsWith(left))\r\n                {\r\n                    webView.RemoveFromSuperview();\r\n\r\n                    // Success Code will only be valid for a short period of time\r\n                    var successCode = t.Substring(left.Length);\r\n\r\n                    // Refresh Token is permanent, it can be stored an reused later\r\n                    refreshToken = await CloudStorage.GetRefreshTokenAsync(CLIENT_ID, CLIENT_SECRET, successCode);\r\n\r\n                    View.AddSubview(button);\r\n                }\r\n            };\r\n#endif\r\n        }\r\n```\r\n\r\n# How do I make a Cloud Storage object accessible from a web page ?\r\n\r\nIf you want your object to be accessible by a browser, C# code not using the DataNuage.Google.CloudStorage library or any HTTP GET request, you need to make it ?PublicRead?.\r\nYou may also have to set its content-type so that it is recognised for what it is (not just a collection of bytes).\r\n\r\n```csharp\r\nawait PutObjectAsync(\"bucket name\", \"object name\", data, Acl.PublicRead, \"image/jpeg\")\r\n```\r\n \r\nIf your file is not a jpeg image, look here for appropriate content types http://en.wikipedia.org/wiki/Internet_media_type\r\n\r\nThe URL of the public object is always of the form http(s)://storage.googleapis.com/my-globally-unique-bucket-name/my-object-name\r\nCloud Storage also treat the bucket name as a subdomain so http(s)://my-globally-unique-bucket-name.storage.googleapis.com/my-object-name is valid as well.\r\n\r\n\r\n# How do I create folders ?\r\n\r\nCloud Storage does not have the concept of folders. It only deals with buckets and objects.\r\nA bucket must have a name that is unique across all Cloud Storage users worldwide and it can only contain objects (no bucket in buckets).\r\n\r\nHaving said that, it is fairly easy to simulate folder structures by adding slashes (\u0027/\u0027) to the object name:\r\n\r\n```csharp\r\nvar cs = new CloudStorage(CLIENT_ID, CLIENT_SECRET, refreshToken, project);\r\n\r\nawait cs.PutObjectAsync(\"my-globally-unique-bucket-name\", \"myfolder/myotherfolder/obj.txt\", \"Hello World\", Acl.PublicRead);\r\n\r\nvar wc = new WebClient();\r\nvar s = wc.DownloadString(\"http://storage.googleapis.com/my-globally-unique-bucket-name/myfolder/myotherfolder/obj.txt\");\r\n\r\nAssert.IsTrue(s == \"Hello World\");\r\n\r\nawait cs.DeleteObjectAsync(\"my-globally-unique-bucket-name\", \"myfolder/myotherfolder/obj.txt\");\r\n```\r\n","Version":"1.0.110.0","Summary":"Use Google Cloud Storage to store and retrieve any amount of data at any time, from anywhere.","QuickStart":"DataNuage.Google.CloudStorage is a client library that uses Google Cloud Storage to store and retrieve any amount of data at any time, from anywhere.\r\n\r\nsupport@datanuage.com\r\n\r\nThe first thing you need to do is create a Google account (if you don\u0027t already have one).\r\nOnce you have created an account, you need to create a project https://console.developers.google.com/project\r\nFrom the project credentials, https://console.developers.google.com/project/YOUR_PROJECT_ID/apiui/credential your get your Client Id, Client Secret and Project Id.\r\n\r\nWith your Client Id, Client Secret and Project Id, you can go to a web page and authorize your application to use Google Cloud Storage which gives you a Success Code.\r\n\r\nFinally, from that Success Code (temporary), you get a permanent Refresh Token that you can store and reuse later.\r\n\r\nYour Client Id, Client Secret, Refresh Token and Project Id need to be passed as parameters of the constructor of the CloudStorage class.\r\nOnce you have an instance of CloudStorage, your can create buckets (similar to folders) and objects as in the example below.\r\n\r\nYOU SHOULD ONLY UPLOAD DUMMY DATA WHILE USING THE TRIAL VERSION OF THE SOFTWARE AS EVERY TRIAL USER SHARES THE SAME GOOGLE CLOUD STORAGE ACCOUNT.\r\nAny user of the trial version of the SOFTWARE will be able to view, copy, delete any data you might upload during the trial.\r\n\r\n```csharp\r\nusing DataNuage.Google.CloudStorage;\r\n...\r\n\r\n\tbutton.Click += async (_, __) =\u003e\r\n        {\r\n            var random = new Random();\r\n\r\n            var cs = new CloudStorage(...);\r\n\r\n            var bucket = \"my-globally-unique-bucket-name\" + random.Next();\r\n\r\n            await cs.CreateBucketAsync(bucket);\r\n\r\n            await cs.PutObjectAsync(bucket,\"myobject\",\"Hello World\");\r\n\r\n            var s = await s3.GetObjectAsStringAsync(bucket, \"myobject\");\r\n\r\n            await cs.DeleteObjectAsync(bucket, \"myobject\");\r\n\r\n            await cs.DeleteBucketAsync(bucket);\r\n        };\r\n```\r\n\r\n","Hash":"d22214fd713bfdf37acd66d87d0cca2e","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}