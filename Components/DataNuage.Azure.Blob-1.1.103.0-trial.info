{"Name":"Azure Blob Storage","Id":2986,"Alias":"DataNuage.Azure.Blob","Description":"DataNuage.Azure.Blob is a client library that uses Microsoft\u0027s Azure Blob Storage to store and retrieve any amount of data at any time, from anywhere.\r\n\r\nsupport@datanuage.com\r\n\r\nYour Account and AccessKey need to be passed as parameters of the constructor of the AzureBlobStorage class.\r\nOnce you have an instance of AzureBlobStorage, your can create buckets (similar to folders) and objects as in the example below.\r\n\r\nYOU SHOULD ONLY UPLOAD DUMMY DATA WHILE USING THE TRIAL VERSION OF THE SOFTWARE AS EVERY TRIAL USER SHARES THE SAME AZURE STORAGE ACCOUNT.\r\nAny user of the trial version of the SOFTWARE will be able to view, copy, delete any data you might upload during the trial.\r\n\r\n```csharp\r\nusing DataNuage.Azure.Blob;\r\n...\r\n\r\npublic override void ViewDidLoad()\r\n{\r\n    base.ViewDidLoad();\r\n\r\n    View.Frame = UIScreen.MainScreen.Bounds;\r\n    View.BackgroundColor = UIColor.White;\r\n    View.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleHeight;\r\n\r\n    button = UIButton.FromType(UIButtonType.RoundedRect);\r\n\r\n    button.Frame = new CGRect(\r\n        View.Frame.Width / 2 - buttonWidth / 2,\r\n        View.Frame.Height / 2 - buttonHeight / 2,\r\n        buttonWidth,\r\n        buttonHeight);\r\n\r\n    button.SetTitle(\"Click me\", UIControlState.Normal);\r\n\r\n    CancellationTokenSource cts = null;\r\n\r\n    button.TouchUpInside += async (sender, e) =\u003e\r\n    {\r\n        if (cts != null)\r\n        {\r\n            cts.Cancel();\r\n            return;\r\n        }\r\n\r\n        button.SetTitle(\"In progress\", UIControlState.Normal);\r\n\r\n        var random = new Random();\r\n\r\n        var bucket = \"my-unique-bucket-name\" + random.Next();\r\n\r\n        try\r\n        {\r\n            var abs = new AzureBlobStorage(\"\u003cYour Azure Account Name\u003e - ignored by Trial version\",\r\n                        \"\u003cYour Azure Blob Access Key\u003e - ignored by Trial version\");\r\n\r\n            await abs.CreateBucketAsync(bucket);\r\n            button.SetTitle(String.Format(\"Bucket {0} created\", bucket), UIControlState.Normal);\r\n\r\n            await abs.PutObjectAsync(bucket, \"myobject\", \"Hello World\");\r\n            button.SetTitle(String.Format(\"Object myobject created\"), UIControlState.Normal);\r\n\r\n            var s = await abs.GetObjectAsStringAsync(bucket, \"myobject\");\r\n            button.SetTitle(String.Format(\"{0} read\", s), UIControlState.Normal);\r\n\r\n            await abs.DeleteObjectAsync(bucket, \"myobject\");\r\n            button.SetTitle(String.Format(\"Object myobject deleted\"), UIControlState.Normal);\r\n\r\n            var dummyData = new byte[1000000];\r\n            cts = new CancellationTokenSource();\r\n\r\n            try\r\n            {\r\n                await abs.PutObjectAsync(\r\n                    bucket,\r\n                    \"big\",\r\n                    dummyData,\r\n                    cancellationToken: cts.Token,\r\n                        progress: l =\u003e button.SetTitle(\r\n                                string.Format(\"Upload {0}% - Click to cancel\", (100 * l) / dummyData.Length),\r\n                                UIControlState.Normal));\r\n            }\r\n            catch (OperationCanceledException)\r\n            {\r\n                button.SetTitle(\"Canceled\", UIControlState.Normal);\r\n            }\r\n\r\n            cts = null;\r\n\r\n            foreach (var objectName in await abs.ListObjectsAsync(bucket))\r\n            {\r\n                await abs.DeleteObjectAsync(bucket, objectName);\r\n            }\r\n\r\n            await abs.DeleteBucketAsync(bucket);\r\n            button.SetTitle(String.Format(\"Empty bucket {0} deleted\", bucket), UIControlState.Normal);\r\n\r\n            button.SetTitle(\"Success\", UIControlState.Normal);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            new UIAlertView(\"Error\", ex.Message, null, \"ok\", null).Show();\r\n            button.SetTitle(\"Click me\", UIControlState.Normal);\r\n        }\r\n    };\r\n\r\n    button.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleTopMargin |\r\n        UIViewAutoresizing.FlexibleBottomMargin;\r\n\r\n    View.AddSubview(button);\r\n}\r\n```\r\n\r\n# How do I make a Blob Storage Object accessible from a web page ?\r\n\r\nIf you want your object to be accessible by a browser, C# code not using the DataNuage.Azure.Blob library or any HTTP GET request, you need to make its bucket \u0027PublicRead\u0027.\r\nYou may also have to set the object content-type so that it is recognised for what it is (not just a collection of bytes).\r\n\r\n```csharp\r\nawait abs.CreateBucketAsync(\"my-public-bucket\", BucketAcl.PublicRead);\r\nawait abs.PutObjectAsync(\"my-public-bucket\", \"mybitmap.jpg\", data, contentType: \"image/jpeg\");\r\nvar wc = new WebClient();\r\nvar bitmapBytes = wc.DownloadData(abs.GetUrl(\"my-public-bucket\", \"mybitmap.jpg\"));\r\n```\r\n \r\nIf your file is not a jpeg image, look here for appropriate content types http://en.wikipedia.org/wiki/Internet_media_type\r\n\r\nThe URL of the public object is always of the form http(s)://myaccountname.blob.core.windows.net/mybucket/myobject\r\n\r\n\r\n# How do I create folders ?\r\n\r\nAzure Blob Storage does not have the concept of folders. It only deals with buckets and objects.\r\nA bucket can only contain objects (no bucket in buckets).\r\n\r\nHaving said that, it is fairly easy to simulate folder structures by adding slashes (\u0027/\u0027) to the object name:\r\n\r\n```csharp\r\nvar abs = new AzureBlobStorage(\"\u003cYour Azure Account Name\u003e - ignored by Trial version\",\r\n                        \"\u003cYour Azure Blob Access Key\u003e - ignored by Trial version\");\r\n\r\nawait abs.CreateBucketAsync(\"my-public-bucket\", BucketAcl.PublicRead);\r\nawait abs.PutObjectAsync(\"my-public-bucket\", \"myfolder/myotherfolder/obj.txt\", \"Hello World\", Acl.PublicRead);\r\n\r\nvar wc = new WebClient();\r\nvar s = wc.DownloadString(\"http://myaccountname.blob.core.windows.net/my-public-bucket/myfolder/myotherfolder/obj.txt\");\r\n```\r\n\r\n# I don\u0027t feel comfortable storing my Access Key on the device. Is there an alternative ?\r\n\r\nYou can use a feature called Shared Access Signature or SAS for short which let you create pre-authorized URLs.\r\nTypically, you would use it like this:\r\n\r\n```csharp\r\n// START OF SERVER CODE\r\nvar abs = new AzureBlobStorage(\"...\", \"...\");\r\n\r\n// Create the bucket (do it only the first time)\r\nawait abs.CreateBucketAsync(\"my-sas-test-bucket\");\r\n\r\nawait abs.PutObjectAsync(\"my-sas-test-bucket\", \"myobject\", \"Hello\");\r\n\r\nvar url = abs.GetSharedAccessSignature(\r\n\"my-sas-test-bucket\",\r\n\"myobject\",\r\nDateTime.UtcNow.AddMinutes(-30), // Start date with some margin for error between server times\r\nDateTime.UtcNow.AddDays(1), // Valid for one day\r\nAccess.Read | Access.Write | Access.Delete);\r\n//END OF SERVER CODE\r\n\r\n\r\n// Send read/write/delete urls (strings) to device by whichever means you see fit\r\n\r\n\r\n//START OF DEVICE CODE (NO ACCESS KEY NEEDED)\r\nvar sas = new SharedAccessSignature(url);\r\n\r\nvar hello = await sas.GetObjectAsStringAsync(); // Hello\r\nawait sas.PutObjectAsync(\"Goodbye\");// Set object content to \u0027Goodbye\u0027\r\nawait sas.DeleteObjectAsync();// Delete object\r\n//END OF DEVICE CODE\r\n```\r\n\r\nHowever, the recommended approach is to use access policies (which you can disable if pre-authorized URLs get leaked):\r\n\r\n```csharp\r\n// START OF SERVER CODE\r\nvar abs = new AzureBlobStorage(\"...\", \"...\");\r\n\r\n// Create the bucket (do it only the first time)\r\nawait abs.CreateBucketAsync(\"my-sas-test-bucket\");\r\n\r\nawait abs.SetAccessPolicyAsync(\r\n    \"my-sas-test-bucket\",\r\n    \"mypolicy\",\r\n    DateTime.UtcNow.AddMinutes(-30), // Start date with some margin for error between server times\r\n    DateTime.UtcNow.AddMonths(1), // Valid for one month\r\n    Access.Read | Access.Write | Access.Delete);\r\n\r\nawait abs.PutObjectAsync(\"my-sas-test-bucket\", \"myobject\", \"Hello\");\r\n\r\nvar url = abs.GetSharedAccessSignature(\r\n\"my-sas-test-bucket\",\r\n\"mypolicy\");\r\n//END OF SERVER CODE\r\n\r\n\r\n// Send the url (string) to the device by whichever means you see fit\r\n\r\n\r\n//START OF DEVICE CODE (NO ACCESS KEY NEEDED)\r\nvar sas = new SharedAccessSignature(url);\r\n\r\nvar hello = await sas.GetObjectAsStringAsync(); // Hello\r\nawait sas.PutObjectAsync(\"Goodbye\");// Set object content to \u0027Goodbye\u0027\r\nawait sas.DeleteObjectAsync();// Delete object\r\n//END OF DEVICE CODE\r\n```\r\n\r\nNote that you can have up to 5 access policies per bucket/container and that they cannot be deleted (but you can update then with no rights or and expiry date in the past).\r\n\r\n# Can I use Shared Access Signature (SAS) to let the client create/list/delete objects/blobs ?\r\n\r\nYes, you can create SAS on buckets/containers.\r\n\r\n```csharp\r\n// START OF SERVER CODE\r\nvar abs = new AzureBlobStorage(\"...\", \"...\");\r\n\r\n// Create the bucket (do it only the first time)\r\nawait abs.CreateBucketAsync(\"my-sas-test-bucket\");\r\n\r\nawait abs.SetAccessPolicyAsync(\r\n    \"my-sas-test-bucket\",\r\n    \"mypolicy\",\r\n    DateTime.UtcNow.AddMinutes(-30), // Start date with some margin for error between server times\r\n    DateTime.UtcNow.AddMonths(1), // Valid for one month\r\n    Access.Read | Access.Write | Access.Delete | Access.List);\r\n\r\nvar url = abs.GetSharedAccessSignature(\r\n\"my-sas-test-bucket\", // No object/blob name, apply to the entire bucket/container\r\n\"mypolicy\");\r\n//END OF SERVER CODE\r\n\r\n\r\n// Send url (string) to device by whichever means you see fit\r\n\r\n\r\n//START OF DEVICE CODE (NO ACCESS KEY NEEDED)\r\nvar sas = new SharedAccessSignature(url);\r\n\r\nawait sas.PutObjectWithNameAsync(\"myobject\", \"Hello\");// Create the object/blob\r\n\r\nvar hello = await sas.GetObjectAsStringAsync(\"myobject\"); // Hello\r\nawait sas.PutObjectWithNameAsync(\"myobject\", \"Goodbye\");// Set object content to \u0027Goodbye\u0027\r\n\r\nforeach (var name in await sas.ListObjectsAsync())\r\n{\r\n    await sas.DeleteObjectAsync(name);// Delete object\r\n}\r\n//END OF DEVICE CODE\r\n```","Version":"1.1.103.0","Summary":"Use Azure Blob Storage to store and retrieve any amount of data at any time, from anywhere.","QuickStart":"DataNuage.Azure.Blob is a client library that uses Azure Blob Storage to store and retrieve any amount of data at any time, from anywhere.\r\n\r\nsupport@datanuage.com\r\n\r\nThe first thing you need to do is create a Microosft Azure account http://azure.microsoft.com/en-gb/pricing/free-trial/\r\nThen you need to create a Storage Account and go to Manage Access Keys.\r\n\r\nYour storage account name and access key (primary or secondary, it doesn\u0027t matter) need to be passed as parameters of the constructor of the AzureBlobStorage class.\r\nOnce you have an instance of AzureBlobStorage, your can create buckets (aka Containers, similar to folders) and objects (aka Blobs) as in the example below.\r\n\r\nYOU SHOULD ONLY UPLOAD DUMMY DATA WHILE USING THE TRIAL VERSION OF THE SOFTWARE AS EVERY TRIAL USER SHARES THE SAME AZURE STORAGE ACCOUNT.\r\nAny user of the trial version of the SOFTWARE will be able to view, copy, delete any data you might upload during the trial.\r\n\r\n```csharp\r\nusing DataNuage.Azure.Blob;\r\n...\r\n\r\n\tbutton.Click += async (_, __) =\u003e\r\n        {\r\n            var random = new Random();\r\n\r\n            var cs = new AzureBlobStorage(\"\u003cYour Azure Account Name\u003e - ignored by Trial version\",\r\n                        \"\u003cYour Azure Blob Access Key\u003e - ignored by Trial version\");\r\n\r\n            var bucket = \"my-unique-bucket-name\" + random.Next();\r\n\r\n            await cs.CreateBucketAsync(bucket);\r\n\r\n            await cs.PutObjectAsync(bucket,\"myobject\",\"Hello World\");\r\n\r\n            var s = await s3.GetObjectAsStringAsync(bucket, \"myobject\");\r\n\r\n            await cs.DeleteObjectAsync(bucket, \"myobject\");\r\n\r\n            await cs.DeleteBucketAsync(bucket);\r\n        };\r\n```\r\n\r\n","Hash":"8e3261d701a227156ab92c13e8f3f300","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":"cf1061eff10dcb4bd082be5e689fa72c"}